#!/bin/bash
set -euo pipefail

# exit with an error message
die() {
	echo "Error: $*" >&2
	exit 1
}

format="${1:-}"
if [[ -z "$format" ]]; then
	die "you should specify an output format"
fi
shift

# build the test OS image
docker buildx bake efi-firmware test-os-"$format" "$@"

name=out/claylinux
case "$format" in
	efi)
		boot_opts=(-kernel "${name}.efi")
		;;
	raw)
		boot_opts=(-drive "file=${name}.img,format=raw")
		;;
	qcow2)
		boot_opts=(-drive "file=${name}.qcow2,format=qcow2")
		;;
	iso)
		boot_opts=(-drive "file=${name}.iso,media=cdrom")
		;;
	*)
		die "invalid format '$format'"
		;;
esac

qemu_bin=qemu-system-x86_64
accelerator=kvm

# special case for WSL on Microsoft Windows
if [[ -n "${WSL_DISTRO_NAME:-}" ]]; then
	qemu_bin=${qemu_bin}.exe
	accelerator=whpx,kernel-irqchip=off
fi

# machine:
# - q35 correspond to a modern PC
# - use the proper accelerator
"$qemu_bin" \
-machine q35 \
-accel ${accelerator} \
-bios out/OVMF.fd \
-m 2G \
-nodefaults \
-nographic \
-serial mon:stdio \
-netdev user,id=net \
-device virtio-net,netdev=net \
-device virtio-rng \
"${boot_opts[@]}"
# see https://gitlab.com/qemu-project/qemu/-/issues/513
# smm=on
# -global driver=cfi.pflash01,property=secure,value=on \
# -drive if=pflash,format=raw,unit=0,file=out/OVMF_CODE.fd,readonly=on \
# -drive if=pflash,format=raw,unit=1,file=out/OVMF_VARS.fd \
